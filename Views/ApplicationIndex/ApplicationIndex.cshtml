@model Ignia.Topics.Web.Mvc.TopicViewModel

@using Ignia.Topics
@using GoldSim.Web.Models;

@{
  Layout = "~/Views/Layout/_Layout.cshtml";
}

@section PageBodySection {

  <!--
  <section class="panel body">
    @Html.Raw(HttpUtility.HtmlDecode(@Model.Topic.Attributes.Get("Body")))
  </section>
  -->

  <section class="panel accordion">
    <ul class="accordion applications" data-accordion>

      @foreach (var category in getCategorizedApplications()) {

      <!-- @category.Key -->
      <li class="accordion-item @(isFirst()? "is-active" : "")" data-accordion-item>
        <a class="accordion-title" href="#">@category.Key</a>

        <!-- @category Applications -->
        <div class="accordion-content" data-tab-content>
          @Html.Partial("_CardList", new CardListViewModel(category.Value, "application"))
        </div>
        <!-- /@category.Key Applications -->

      </li>

      }

    </ul>
  </section>

}

@functions {

  /*============================================================================================================================
  | VARIABLES
  \---------------------------------------------------------------------------------------------------------------------------*/
  Dictionary<string, List<Topic>> _categorizedApplications = null;
  List<Topic> _applicationPages = null;
  bool _isFirst = true;

  /*============================================================================================================================
  | GET CATEGORIZED APPLICATIONS
  >-----------------------------------------------------------------------------------------------------------------------------
  | Returns a set of applications grouped by category.
  \---------------------------------------------------------------------------------------------------------------------------*/
  Dictionary<string, List<Topic>> getCategorizedApplications() {

    if (_categorizedApplications == null) {

      _categorizedApplications = new Dictionary<string, List<Topic>>();
      var contentType = Model.Topic.Attributes.Get("FilteredDocumentType");

      foreach (Topic applicationPage in Model.Topic.FindAllByAttribute("ContentType", contentType)) {
        if (applicationPage.ContentType == "ApplicationPage") {
          var category = applicationPage.Attributes.Get("Category");
          addApplicationPage(category, applicationPage);
        }
        else {
          foreach (Topic application in applicationPage["Applications"]) {
            var category = application.Attributes.Get("Category");
            addApplicationPage(category, applicationPage);
          }
        }
      }

    }
    return _categorizedApplications;
  }

  /*============================================================================================================================
  | ADD APPLICATION PAGE
  >-----------------------------------------------------------------------------------------------------------------------------
  | Ensures that the appropriate category exists and then adds the application page to the category.
  \---------------------------------------------------------------------------------------------------------------------------*/
  void addApplicationPage(string category, Topic applicationPage) {
    if (!_categorizedApplications.ContainsKey(category)) {
      _categorizedApplications.Add(category, new List<Topic>());
    }
    if (!_categorizedApplications[category].Contains(applicationPage)) {
      _categorizedApplications[category].Add(applicationPage);
    }
  }

  /*============================================================================================================================
  | IS FIRST?
  >-----------------------------------------------------------------------------------------------------------------------------
  | Returns true if the item is the first item in the list. Automatically toggles to false after the first time it is called.
  \---------------------------------------------------------------------------------------------------------------------------*/
  bool isFirst() {
    if (_isFirst) {
      _isFirst = false;
      return true;
    }
    return false;
  }

}

<!--
  Content Type: Application List
  View Location: ~/Views/ApplicationIndex/ApplicationIndex.cshtml
-->