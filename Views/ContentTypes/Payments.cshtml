@model PaymentsTopicViewModel
@{
  Layout = "~/Views/Layout/_Layout.cshtml";
}

@section PageBodySection {

  <section class="panel body" style="width: 100%">

    @if (Model.ErrorMessages != null && Model.ErrorMessages.Count > 0)
    {
      <div class="callout alert">
        <p>There were problems with your payment submission. Please correct the following and submit your payment again:</p>
        <ul>
          @foreach (string errorMessageKey in Model.ErrorMessages.Keys)
          {
            <li>@Model.ErrorMessages[errorMessageKey]</li>
          }
        </ul>
      </div>
    }
    <div id="ClientSideErrors" class="callout alert is-hidden">
      <p>There were problems with your payment submission. Please correct the following and submit your payment again:</p>
      <ul>
        <li id="EmptyFieldsError" class="is-hidden">Please fill out all fields.</li>
        <li id="CCNumberError" class="is-hidden">Please enter a valid credit card number.</li>
        <li id="CvvError" class="is-hidden">Please enter a valid card verification value (CVV).</li>
        <li id="PostalCodeError" class="is-hidden">Please enter a valid ZIP or postal code.</li>
      </ul>
    </div>
    @if (!String.IsNullOrEmpty(Model.ConfirmationMessageSuccess))
    {
      <div class="callout success">
        <p>@Model.ConfirmationMessageSuccess</p>
      </div>
    }

    <form id="PaymentsForm" method="post" class="payments-form">

      <div class="grid-container">
        <div class="grid-x grid-margin-x">

          <!-- Company Name -->
          <div class="cell">
            <label for="Company" class="required">
              *Company Name
              <input id="Company" name="company" type="text" required placeholder="Company Name">
            </label>
          </div>

          <!-- Invoice Number -->
          <div class="medium-6 cell">
            <label for="Invoice" class="required">
              *Invoice Number
              <input id="Invoice" name="invoice" type="text" required placeholder="Invoice Number">
            </label>
          </div>

          <!-- Amount -->
          <div class="medium-6 cell">
            <label for="Amount" class="required">
              *Amount
              <input id="Amount" name="amount" type="tel" required min="1" placeholder="1000">
            </label>
          </div>

          <!-- CC Number -->
          <div class="medium-6 cell">
            <label for="CardNumber" class="hosted-field-label required">
              *Card Number
              <span id="CardNumber" class="hosted-field required"></span>
            </label>
          </div>

          <!-- Expiration Month/Year -->
          <div class="medium-6 cell">
            <label for="Expiration" class="hosted-field-label required">*Expiration</label>
            <span id="ExpirationMonth" class="hosted-field padded required" style="margin-right: .9375rem; width: 23%;"></span>
            <span id="ExpirationYear" class="hosted-field padded required" style="margin-left: .9375rem; width: 68%;"></span>
          </div>

          <!-- CVV Code -->
          <div class="medium-6 cell">
            <label for="Cvv" class="hosted-field-label required">
              *CVV
              <span id="Cvv" class="hosted-field padded required"></span>
            </label>
          </div>

          <!-- Postal Code -->
          <div class="medium-6 cell">
            <label for="PostalCode" class="hosted-field-label required">
              *ZIP / Postal Code
              <span id="PostalCode" class="hosted-field padded required"></span>
            </label>
          </div>

          <input id="PaymentMethodNonce" name="paymentMethodNonce" type="hidden" />

          @Html.AntiForgeryToken()

          <!-- Submit -->
          <div class="cell">
            <button type="submit" disabled class="button large submit secondary">Submit Payment</button>
          </div>

        </div>
      </div>
    </form>

  </section>

}

@section CallsToActionSection {}

@section Scripts {

  <!-- Braintree -->
  <script src="https://js.braintreegateway.com/web/3.39.0/js/client.min.js"></script>
  <script src="https://js.braintreegateway.com/web/3.39.0/js/hosted-fields.min.js"></script>

  <script>

      /**
       * Initializes the Braintree Javascript v3 SDK and dynamically creates the primary Braintree form fields.
       */
      var clientToken           = "@Model.ClientToken";
      var form                  = document.querySelector('#PaymentsForm');
      var submit                = document.querySelector('button[type="submit"]');

      var clientInstance        = braintree.client.create({
        authorization           : clientToken
      }, function (clientError, clientInstance) {

        if (clientError) {
          console.error(clientError);
          return;
        }

        braintree.hostedFields.create({
          client: clientInstance,
          styles: {
            'input': {
              'font-family'     : 'Helvetica, Roboto, Arial, sans-serif',
              'font-size'       : '.9375rem',
              'line-height'     : '1.5',
              'color'           : 'rgb(32, 32, 32)'
            }
          },
          fields: {
            number: {
              selector          : '#CardNumber',
              placeholder       : '1111 1111 1111 1111'
            },
            cvv: {
              type              : 'password',
              selector          : '#Cvv',
              placeholder       : '123'
            },
            expirationMonth: {
              selector          : '#ExpirationMonth',
              placeholder       : '01'
            },
            expirationYear: {
              selector          : '#ExpirationYear',
              placeholder       : '2021'
            },
            postalCode: {
              selector          : '#PostalCode',
              placeholder       : '12345'
            }
          }
        }, function (hostedFieldsError, hostedFieldsInstance) {

          if (hostedFieldsError) {
            console.error(hostedFieldsError);
            return;
          }

          submit.removeAttribute('disabled');

          form.addEventListener('submit', function (event) {
            event.preventDefault();

            hostedFieldsInstance.tokenize(function (tokenizeError, payload) {
              if (tokenizeError) {
                console.error(tokenizeError);

                switch (tokenizeError.code) {

                  case 'HOSTED_FIELDS_FIELDS_EMPTY':
                    // occurs when none of the fields are filled in
                    $('label.hosted-field-label.required').addClass('is-invalid-label');
                    $('span.hosted-field.required').addClass('is-invalid-input');
                    $('#EmptyFieldsError').removeClass('is-hidden');
                    $('#ClientSideErrors').removeClass('is-hidden');
                    break;

                  case 'HOSTED_FIELDS_FIELDS_INVALID':
                    // occurs when certain fields do not pass client side validation
                    $.each(tokenizeError.details.invalidFieldKeys, function(index, key) {
                      if (key === 'number') {
                        $('#CCNumberError').removeClass('is-hidden');
                      }
                      if (key === 'cvv') {
                        $('#CvvError').removeClass('is-hidden');
                      }
                      if (key === 'postalCode') {
                        $('#PostalCodeError').removeClass('is-hidden');
                      }
                    });
                    $.each(tokenizeError.details.invalidFields, function (fieldContainer, element) {
                      var containerElement = element.getAttribute('id');
                      $('label[for="' + containerElement + '"]').addClass('is-invalid-label');
                      $('span#' + containerElement).addClass('is-invalid-input');
                      if (containerElement.startsWith('Expiration')) {
                        $('label[for="Expiration"]').addClass('is-invalid-label');
                      }
                    });
                    break;

                  case 'HOSTED_FIELDS_FAILED_TOKENIZATION':
                    // occurs for any other tokenization error on the server
                    console.error('Tokenization failed server side. Is the card valid?');
                    break;

                  case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':
                    // occurs when the Braintree gateway cannot be contacted
                    console.error('Network error occurred when tokenizing.');
                    break;

                  default:
                    console.error(tokenizeError);
                }

                $('#ClientSideErrors').removeClass('is-hidden');

                return;
              }

              document.querySelector('#PaymentMethodNonce').value             = payload.nonce;
              form.submit();
            });
          }, false);

        });
      });

      /**
       * Initialize Foundation
       */
      $(document).foundation();

  </script>

}