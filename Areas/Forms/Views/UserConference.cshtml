@model FormPageTopicViewModel<UserConferenceFormBindingModel>

@section PageBodySection {

  <fieldset>
    <legend>Contact Information</legend>
    <div class="grid-x grid-margin-x">
      <partial name="_ExtendedContact" for="BindingModel" />
      @Html.EditorFor(model => model.BindingModel.FaxNumber, "String")
    </div>
  </fieldset>

  <fieldset>
    <legend>Oral Presentation or Poster Session</legend>
    <div class="grid-x grid-margin-x">
      @Html.EditorFor(model => model.BindingModel.WillSubmitPoster, new { cssClass="" })
      @Html.EditorFor(model => model.BindingModel.PosterDescription, "TextArea")
      <div class="cell">
        <p style="margin-top: 1rem;">
          <em>We will follow up with instructions for submitting and presenting your poster at the conference.</em>
          <strong>Poster presenters will be entered into a drawing for a $500 Amazon gift certificate. Attendees will also vote on a Best Poster, with the winner receiving a $500 Amazon gift certificate.</strong>
        </p>
      </div>
    </div>
  </fieldset>

  <fieldset>
    <legend>Advanced Training Topics</legend>
    <div class="grid-x grid-margin-x">
      <div class="cell">
        <p>The first day of the conference (September 11) will consist of two parallel sessions on advanced GoldSim applications and modeling techniques. Attendees will be able to move between the two sessions (each topic will last approximately 1 hour) in order to select the topics that best align with their interests. Topics will be based on attendee requests specified below:</p>
      </div>

      @Html.EditorFor(model => model.BindingModel.TrainingTopics.Scripts)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelingPumps)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.DiscreteEventModeling)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelingReservoirOperations)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelingScenarios)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelingRunoff)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.TimesteppingTechniques)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.StochasticWeatherGeneration)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelCalibration)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.RiverRouting)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.DashboardAuthoring)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelingFlowNetworks)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.CausalitySequence)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ModelingPopulationGrowth)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.ReliabilityModeling)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.Other)
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.GeochemicalCalculations)

    </div>
    <div class="cell">
      @Html.EditorFor(model => model.BindingModel.TrainingTopics.OtherDetails, new { cssClass = "" })
    </div>
  </fieldset>

  <fieldset>
    <legend>Conference Options</legend>
    <div class="grid-x grid-margin-x">
      <div class="medium-6 cell">
         @Html.EditorFor(model => model.BindingModel.WithStudentDiscount)
      </div>
      <div class="cell radio">
        <input asp-for="BindingModel.IncludeTraining" id="ConferenceOnly" type="radio" value="User Conference Only" /> <label for="ConferenceOnly">User Conference Only (September 11-12): $1,250</label>
        <br /><input asp-for="BindingModel.IncludeTraining" id="ConferenceAndTraining" type="radio" value="Basic Training and Conference" /> <label for="ConferenceAndTraining">Basic Training and Conference (September 10-12): $1,500</label>
        <br /><span class="instructions">Costs include breakfast and lunch each day, as well as dinner during the social events on the evenings of September 10 and 11. Spouses/partners can also attend the two dinners for a modest fee.</span>
      </div>
    </div>
  </fieldset>

  <fieldset>
    <legend>Payment Information</legend>
    <div class="grid-x grid-margin-x">
      <div class="cell radio">
        <input type="radio" name="PaymentMethod" value="CreditCard" id="CreditCard" /> <label for="CreditCard">Credit Card</label>
        <br /><input type="radio" name="PaymentMethod" value="Invoice" id="Invoice" /> <label for="Invoice">Invoice Me</label>
      </div>
      <div class="cell">
        <p id="PaymentInstructions" class="instructions"></p>
      </div>
      @Html.EditorFor(model => model.BindingModel.PurchaseOrderNumber, new { cssClass = "" })
      @Html.EditorFor(model => model.BindingModel.AdditionalInstructions, "TextArea")
      <div class="cell">
        <p class="instructions">NOTE: GoldSim's standard method of invoicing and providing receipts is via email.</p>
      </div>
      @Html.EditorFor(model => model.BindingModel.WithPaperReceipt)
      <div class="cell" style="margin-top: 1rem;">
        <p>Note that you will not be charged when you submit this form. This order is not valid until accepted by GoldSim Technology Group. We will contact you to complete the transaction.</p>
      </div>
    </div>
  </fieldset>

}

@section InlineScript {

  /*------------------------------------------------------------------------------------------------------------------------
  | Establish default state
  \-----------------------------------------------------------------------------------------------------------------------*/
  var instructions = $("#PaymentInstructions");
  var purchaseOrderForm = $("#@Html.IdFor(m => m.BindingModel.PurchaseOrderNumber)").prop("disabled", true);

  /*------------------------------------------------------------------------------------------------------------------------
  | Handle payment information
  \-----------------------------------------------------------------------------------------------------------------------*/
  $("input[name='PaymentMethod']").click(function () {
    purchaseOrderForm.prop("disabled", true);
    switch ($(this).val()) {
      case "Invoice":
        purchaseOrderForm.prop("disabled", false);
        instructions.html("");
        break;
      case "CreditCard":
        purchaseOrderForm.prop("disabled", true);
        instructions.html("If paying by credit card, call 1-425-295-6985 (-8 hours GMT) or fax 1-425-642-8073 to complete transaction.");
        break;
    }
    instructions.show();
  });

}